/*
 * Copyright (C) 2020 PekinSOFT Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * *****************************************************************************
 * *****************************************************************************
 *  Project    :   Load_Master
 *  Class      :   StopsPage.java
 *  Author     :   Sean Carrick
 *  Created    :   Sep 6, 2020 @ 3:34:53 PM
 *  Modified   :   Sep 6, 2020
 *  
 *  Purpose:
 *  
 *  Revision History:
 *  
 *  WHEN          BY                  REASON
 *  ------------  ------------------- ------------------------------------------
 *  Sep 6, 2020  Sean Carrick        Initial creation.
 * *****************************************************************************
 */

package com.pekinsoft.loadmaster.view.wiz.book;

import com.pekinsoft.loadmaster.Starter;
import com.pekinsoft.loadmaster.controller.StopCtl;
import com.pekinsoft.loadmaster.err.DataStoreException;
import com.pekinsoft.loadmaster.err.InvalidTimeException;
import com.pekinsoft.loadmaster.model.CustomerModel;
import com.pekinsoft.loadmaster.model.StopModel;
import com.pekinsoft.loadmaster.utils.MessageBox;
import com.pekinsoft.loadmaster.view.CustomerSelector;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import javax.swing.table.DefaultTableModel;
import org.netbeans.spi.wizard.WizardController;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author Sean Carrick &lt;sean at pekinsoft dot com&gt;
 * 
 * @version 0.1.0
 * @since 0.1.0
 */
public class StopsPage extends WizardPage {
    //<editor-fold defaultstate="collapsed" desc="Public Static Constants">
    
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Private Member Fields">
    // Variables declaration - do not modify                     
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable stopsTable;
    // End of variables declaration                   

    private LogRecord entry;
    private int stopNumber;
    private StopCtl stops;
    
    private boolean isLoading;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Static Initializer">
    static {
        
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Intstance Initializer">
    {
        
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor(s)">
    public StopsPage () {
        try {
            stops = new StopCtl();
        } catch (DataStoreException ex) {
            entry.setSourceClassName(this.getClass().getName());
            entry.setSourceMethodName("StopsPage Constructor");
            entry.setMessage("An error occurred accessing the stops database.");
            entry.setThrown(ex);
            Starter.logger.error(entry);
            MessageBox.showError(ex, "Error Accessing Stops Database");
            stops = null;
        }
        initComponents();
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Public Static Methods">
    public static final String getDescription() {
        return "Stops Information";
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Public Instance Methods">
    
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Private Instance Methods">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        entry = new LogRecord(Level.ALL, "Initializing StopsPage components...");
        jScrollPane1 = new javax.swing.JScrollPane();
        stopsTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();

        stopsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stop #", "Company Name", "Street Address", "Suite", "City", "ST", "Zip Code", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stopsTable);
        if (stopsTable.getColumnModel().getColumnCount() > 0) {
            stopsTable.getColumnModel().getColumn(5).setResizable(false);
            stopsTable.getColumnModel().getColumn(5).setPreferredWidth(10);
            stopsTable.getColumnModel().getColumn(6).setResizable(false);
            stopsTable.getColumnModel().getColumn(6).setPreferredWidth(25);
            stopsTable.getColumnModel().getColumn(7).setResizable(false);
            stopsTable.getColumnModel().getColumn(7).setPreferredWidth(25);
        }

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pekinsoft/loadmaster/res/add.png"))); // NOI18N
        addButton.setText("Add Stop...");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addContainerGap())
        );
    }// </editor-fold>                        

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        CustomerSelector dlg = new CustomerSelector(null, true);
        dlg.pack();
        dlg.show();
        
        if ( dlg != null ) {
             
            SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyyy");
            String eDate = fmt.format(dlg.getEarlyDate());
            String lDate = fmt.format(dlg.getLateDate());
            DefaultTableModel model = (DefaultTableModel)stopsTable.getModel();
            CustomerModel c = dlg.getSelectedCustomer();
            Object[] row = {++stopNumber,       // Stop Number
                            c.getCompany(),     // Company name
                            c.getAddress(),     // Complete address
                            eDate,              // Early date
                            dlg.getEarlyTime(), // Early time
                            lDate,              // Late date
                            dlg.getLateTime()}; // Late time
            model.addRow(row);
            
            stopsTable.setModel(model);
            
            StopModel stop = new StopModel();
            stop.setEarlyDate(dlg.getEarlyDate());
            stop.setLateDate(dlg.getLateDate());
            stop.setCustomer(c.getId());
            
            try {
                stop.setEarlyTime(dlg.getEarlyTime());
                stop.setLateTime(dlg.getLateTime());
            } catch ( InvalidTimeException ex ) {
                entry.setMessage(ex.getMessage() + "\n\n" + "-".repeat(80)
                        + "Provided time is invalid.");
                entry.setThrown(ex);
                entry.setSourceMethodName("connect");
                entry.setParameters(null);
                Starter.logger.error(entry);
            } catch ( ParseException ex ) {
                entry.setMessage(ex.getMessage() + "\n\n" + "-".repeat(80)
                        + "Throwing DataStoreException to calling method...");
                entry.setThrown(ex);
                entry.setSourceMethodName("connect");
                entry.setParameters(null);
                Starter.logger.error(entry);
            }
            
//            if ( stopsTable.getRowCount() >= 2 ) {
//                setForwardNavigationMode(WizardController.MODE_CAN_FINISH);
//            }
            validateContents(stopsTable, null);
            
//            load.addStop(stop);
            
        }
        setForwardNavigationMode(WizardController.MODE_CAN_FINISH);
    }                                         
    //</editor-fold>

    protected String validateContents(Component comp, Object o) {
        if ( stopsTable.getRowCount() < 2 )
            return "A minimum of 2 stops are required.";
        else
            return null;
    }
}
