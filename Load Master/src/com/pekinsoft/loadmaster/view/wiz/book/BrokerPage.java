/*
 * Copyright (C) 2020 PekinSOFT Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * *****************************************************************************
 * *****************************************************************************
 *  Project    :   Load_Master
 *  Class      :   BrokerPage.java
 *  Author     :   Sean Carrick
 *  Created    :   Sep 6, 2020 @ 3:34:44 PM
 *  Modified   :   Sep 6, 2020
 *  
 *  Purpose:
 *  
 *  Revision History:
 *  
 *  WHEN          BY                  REASON
 *  ------------  ------------------- ------------------------------------------
 *  Sep 6, 2020  Sean Carrick        Initial creation.
 * *****************************************************************************
 */

package com.pekinsoft.loadmaster.view.wiz.book;

import com.pekinsoft.loadmaster.Starter;
import com.pekinsoft.loadmaster.controller.BrokerCtl;
import com.pekinsoft.loadmaster.err.DataStoreException;
import com.pekinsoft.loadmaster.model.BrokerModel;
import com.pekinsoft.loadmaster.utils.MessageBox;
import com.pekinsoft.loadmaster.view.NewBrokerDlg;
import org.netbeans.spi.wizard.WizardPage;
import java.util.logging.Level;
import java.util.logging.LogRecord;

/**
 *
 * @author Sean Carrick &lt;sean at pekinsoft dot com&gt;
 * 
 * @version 0.1.0
 * @since 0.1.0
 */
public class BrokerPage extends WizardPage {
    //<editor-fold defaultstate="collapsed" desc="Public Static Constants">
    
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Private Member Fields">
    // Variables declaration - do not modify                     
    private javax.swing.JTextField brokerField;
    private javax.swing.JComboBox<String> brokerList;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField faxField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField phoneField;
    
    private LogRecord lr;
    private BrokerCtl records;
    private BrokerModel broker;
    // End of variables declaration                   
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Static Initializer">
    static {
        
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Intstance Initializer">
    {
        
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Constructor(s)">
    public BrokerPage () {
        initComponents();
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Public Static Methods">
    public static final String getDescription() {
        return "Broker/Agent Information()";
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Public Instance Methods">
    
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Private Instance Methods">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        lr = new LogRecord(Level.ALL, "Initializing BrokerPage components...");

        jLabel5 = new javax.swing.JLabel();
        brokerList = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        brokerField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        faxField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();

        jLabel5.setText("Broker/Agent:");

        brokerList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        try {
            records = new BrokerCtl();
            lr.setMessage("Brokers database accessed successfully!");
            Starter.logger.info(lr);
            
            if ( records.getRecordCount() == 0 ) {
                // There are no brokers in the database, so show the New Broker/
                //+ Agent dialog so the broker can be entered.
                NewBrokerDlg dlg = new NewBrokerDlg(null, true);
                dlg.pack();
                dlg.setVisible(true);
                
                if ( !dlg.isCancelled() ) {
                    // we need to populate the fields with the created broker or
                    //+ agent data.
                    BrokerModel b = dlg.getBroker();
                    if ( b.getCompany().length() > 0 ) {
                        brokerField.setText(b.getCompany());
                    } else if ( b.getContact().length() > 0 ) {
                        brokerField.setText(b.getContact());
                    } else {
                        brokerField.setText("<NO CONTACT OR COMPANY NAME>");
                    }
                    
                    phoneField.setText(b.getPhone());
                    faxField.setText(b.getFax());
                    emailField.setText(b.getEmail());
                    
                    // Add this broker to the table.
                    records.addNew(b);
                    // Save the data.
                    records.close();
                    
                }
            }
        } catch ( DataStoreException ex ) {
            lr.setMessage("Something went wrong accessing the brokers database.");
            lr.setThrown(ex);
            Starter.logger.error(lr);

            MessageBox.showError(ex, "Database Access");

            records = null;
        }

        brokerList.removeAllItems();
        brokerList.addItem("Select Broker/Agent...");

        try {
            records.first();
        } catch ( DataStoreException ex ) {
            lr.setMessage("Something went wrong moving to the next record.");
            lr.setThrown(ex);
            Starter.logger.error(lr);

            MessageBox.showError(ex, "Database Access");
        }

        for ( int x = 0; x < records.getRecordCount(); x++ ) {
            BrokerModel b = records.get();

            brokerList.addItem(b.getContact() + " (" + b.getId() + ")");

            try {
                if (records.hasNext() )
                records.next();
            } catch ( DataStoreException ex ) {
                lr.setMessage("Something went wrong moving to the next record.");
                lr.setThrown(ex);
                Starter.logger.error(lr);

                //                MessageBox.showError(ex, "Database Access");
            }
        }
        brokerList.setName(""); // NOI18N
        brokerList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectedBrokerChanged(evt);
            }
        });

        jLabel1.setText("Broker/Agent:");

        brokerField.setName("Broker"); // NOI18N

        jLabel2.setText("Phone:");

        phoneField.setName("Phone"); // NOI18N

        jLabel3.setText("Fax:");

        jLabel4.setText("Email:");

        emailField.setName("Email"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(brokerList, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(brokerField)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(phoneField)
                                    .addComponent(faxField, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(emailField, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(brokerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(brokerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(faxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void selectedBrokerChanged(java.awt.event.ItemEvent evt) {                                       
        // In order to get the selected broker, we need to loop through the
        //+ records to find which record has the selected ID number.
        if ( !brokerList.getSelectedItem().toString().equalsIgnoreCase(
                "select broker/agent...") ) {
            String selectedBroker = brokerList.getSelectedItem().toString();
            long brokerID = Long.valueOf(selectedBroker.substring(
                    selectedBroker.indexOf("(") + 1,    // Start after (
                    selectedBroker.indexOf(")")));  // End before )
        
            try {
                records.first();

                for ( int x = 0; x < records.getRecordCount(); x++ ) {
                    BrokerModel b = records.get();

                    if ( brokerID == b.getId() ) {
                        broker = b;
                        break;
                    } else {
                        if ( records.hasNext() ) 
                            records.next();
                    }
                }
                
                if ( broker.getContact() != null && !broker.getContact().isBlank()
                        && !broker.getContact().isEmpty() ) {
                    brokerField.setText(broker.getContact());
                } else {
                    brokerField.setText(broker.getCompany());
                }
                
                if ( broker.getPhone() != null ) {
                    phoneField.setText(broker.getPhone());
                }
                if ( broker.getFax() != null ) {
                    faxField.setText(broker.getFax());
                }
                if ( broker.getEmail() != null ) {
                    emailField.setText(broker.getEmail());
                }
            } catch ( DataStoreException ex ) {
                lr.setMessage("Something went wrong moving to the next record.");
                lr.setThrown(ex);
                Starter.logger.error(lr);

    //            MessageBox.showError(ex, "Database Access");
            }
        }       
    }                                      
    //</editor-fold>

}
